{
	"info": {
		"_postman_id": "a2f782ea-3876-4b74-b2ce-a84ddb07de87",
		"name": "DemoShopping",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21619062",
		"_collection_link": "https://www.postman.com/aerospace-astronaut-81097104/workspace/my-workspace/collection/21619062-a2f782ea-3876-4b74-b2ce-a84ddb07de87?action=share&source=collection_link&creator=21619062"
	},
	"item": [
		{
			"name": "Products",
			"item": [
				{
					"name": "Get products list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GET /products returns 200 on success\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{demo_url}}/products",
							"host": [
								"{{demo_url}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add new product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Сохраняем айдишку товара в переменную",
									"",
									"const responseText = pm.response.text();",
									"",
									"// Используем регулярное выражение для поиска ID",
									"const match = responseText.match(/ID:\\s*(\\d+)/);",
									"",
									"if (match) {",
									"  const id = parseInt(match[1], 10); // Извлекаем и преобразуем ID",
									"  // Сохраняем ID в переменную окружения",
									"  pm.collectionVariables.set(\"new_id\", id);",
									"  // Логируем результат",
									"  console.log(\"Извлечённый ID:\", id);",
									"} else {",
									"  console.error(\"ID не найден в ответе\");",
									"}",
									"",
									"// Тесты",
									"pm.test(\"POST /add-product returns 200 on success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Example Product\",\n  \"description\": \"This is an example product.\",\n  \"price\": 100,\n  \"category\": \"Electronics\",\n  \"manufacturer\": \"Example Manufacturer\",\n  \"imageUrl\": \"http://example.com/image.jpg\",\n  \"freeShipping\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{demo_url}}/add-product",
							"host": [
								"{{demo_url}}"
							],
							"path": [
								"add-product"
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\n  'https://intern.demoshopping.ru/add-product' \\\n  -H 'accept: */*' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"name\": \"Example Product\",\n  \"description\": \"This is an example product.\",\n  \"price\": 100,\n  \"category\": \"Electronics\",\n  \"manufacturer\": \"Example Manufacturer\",\n  \"imageUrl\": \"http://example.com/image.jpg\",\n  \"freeShipping\": true\n}'"
					},
					"response": []
				},
				{
					"name": "Add new product [error]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Сохраняем айдишку товара в переменную",
									"",
									"const responseText = pm.response.text();",
									"",
									"// Используем регулярное выражение для поиска ID",
									"const match = responseText.match(/ID:\\s*(\\d+)/);",
									"",
									"if (match) {",
									"  const id = parseInt(match[1], 10); // Извлекаем и преобразуем ID",
									"  // Сохраняем ID в переменную окружения",
									"  pm.collectionVariables.set(\"new_id\", id);",
									"  // Логируем результат",
									"  console.log(\"Извлечённый ID:\", id);",
									"} else {",
									"  console.error(\"ID не найден в ответе\");",
									"}",
									"",
									"// Тесты",
									"pm.test(\"POST /add-product returns 400 on failure (wrong data in body)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"names\": \"Example Product\",\n  \"descriptions\": \"This is an example product.\",\n  \"prices\": 100,\n  \"categories\": \"Electronics\",\n  \"manufacturers\": \"Example Manufacturer\",\n  \"imageUrls\": \"http://example.com/image.jpg\",\n  \"freeShippings\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{demo_url}}/add-product",
							"host": [
								"{{demo_url}}"
							],
							"path": [
								"add-product"
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\n  'https://intern.demoshopping.ru/add-product' \\\n  -H 'accept: */*' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"name\": \"Example Product\",\n  \"description\": \"This is an example product.\",\n  \"price\": 100,\n  \"category\": \"Electronics\",\n  \"manufacturer\": \"Example Manufacturer\",\n  \"imageUrl\": \"http://example.com/image.jpg\",\n  \"freeShipping\": true\n}'"
					},
					"response": []
				},
				{
					"name": "Get product by valid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GET /products/id/{productId} returns 200 on success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{demo_url}}/products/id/{{new_id}}",
							"host": [
								"{{demo_url}}"
							],
							"path": [
								"products",
								"id",
								"{{new_id}}"
							]
						},
						"description": "Generated from cURL: curl -X 'GET' \\\n  'https://intern.demoshopping.ru/products/id/1' \\\n  -H 'accept: application/json'"
					},
					"response": []
				},
				{
					"name": "Get product by invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GET /products/id/{productId} returns 404 if id is invalid\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{demo_url}}/products/id/{{invalid_id}}",
							"host": [
								"{{demo_url}}"
							],
							"path": [
								"products",
								"id",
								"{{invalid_id}}"
							]
						},
						"description": "Generated from cURL: curl -X 'GET' \\\n  'https://intern.demoshopping.ru/products/id/1' \\\n  -H 'accept: application/json'"
					},
					"response": []
				},
				{
					"name": "Update product by valid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"PUT /products/id/{productId} returns 200 on success\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": {{new_id}},\n  \"name\": \"New name\",\n  \"description\": \"New description\",\n  \"price\": 150.00,\n  \"category\": \"Electronics\",\n  \"manufacturer\": \"Example Manufacturer\",\n  \"imageUrl\": \"http://example.com/image.jpg\",\n  \"freeShipping\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{demo_url}}/products/id/{{new_id}}",
							"host": [
								"{{demo_url}}"
							],
							"path": [
								"products",
								"id",
								"{{new_id}}"
							]
						},
						"description": "Generated from cURL: curl -X 'PUT' \\\n  'https://intern.demoshopping.ru/products/id/1' \\\n  -H 'accept: */*' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"id\": 0,\n  \"name\": \"string\",\n  \"description\": \"string\",\n  \"price\": 0,\n  \"category\": \"string\",\n  \"manufacturer\": \"string\",\n  \"imageUrl\": \"string\",\n  \"freeShipping\": true\n}'"
					},
					"response": []
				},
				{
					"name": "Update product by invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"PUT /products/id/{productId} returns 404 with invalid id\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": {{new_id}},\n  \"name\": \"New name\",\n  \"description\": \"New description\",\n  \"price\": 150.00,\n  \"category\": \"Electronics\",\n  \"manufacturer\": \"Example Manufacturer\",\n  \"imageUrl\": \"http://example.com/image.jpg\",\n  \"freeShipping\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{demo_url}}/products/id/{{invalid_id}}",
							"host": [
								"{{demo_url}}"
							],
							"path": [
								"products",
								"id",
								"{{invalid_id}}"
							]
						},
						"description": "Generated from cURL: curl -X 'PUT' \\\n  'https://intern.demoshopping.ru/products/id/1' \\\n  -H 'accept: */*' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"id\": 0,\n  \"name\": \"string\",\n  \"description\": \"string\",\n  \"price\": 0,\n  \"category\": \"string\",\n  \"manufacturer\": \"string\",\n  \"imageUrl\": \"string\",\n  \"freeShipping\": true\n}'"
					},
					"response": []
				},
				{
					"name": "Update product by valid id [error]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"PUT /products/id/{productId} returns 400 if json is incorrect\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": {{new_id}},\n  \"nameS\": \"New name\",\n  \"descriptionS\": \"New description\",\n  \"price\": 150.00,\n  \"categoryS\": \"Electronics\",\n  \"manufacturer\": \"Example Manufacturer\",\n  \"imageUrl\": \"http://example.com/image.jpg\",\n  \"freeShipping\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{demo_url}}/products/id/{{new_id}}",
							"host": [
								"{{demo_url}}"
							],
							"path": [
								"products",
								"id",
								"{{new_id}}"
							]
						},
						"description": "Generated from cURL: curl -X 'PUT' \\\n  'https://intern.demoshopping.ru/products/id/1' \\\n  -H 'accept: */*' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"id\": 0,\n  \"name\": \"string\",\n  \"description\": \"string\",\n  \"price\": 0,\n  \"category\": \"string\",\n  \"manufacturer\": \"string\",\n  \"imageUrl\": \"string\",\n  \"freeShipping\": true\n}'"
					},
					"response": []
				},
				{
					"name": "Partial product update by valid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"PATCH /products/id/{productId} returns 200 on success\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"name\":\"New Updated Name\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{demo_url}}/products/id/{{new_id}}",
							"host": [
								"{{demo_url}}"
							],
							"path": [
								"products",
								"id",
								"{{new_id}}"
							]
						},
						"description": "Generated from cURL: curl -X 'PATCH' \\\n  'https://intern.demoshopping.ru/products/id/1' \\\n  -H 'accept: */*' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"name\": \"string\",\n  \"description\": \"string\",\n  \"price\": 0,\n  \"category\": \"string\",\n  \"manufacturer\": \"string\",\n  \"imageUrl\": \"string\",\n  \"freeShipping\": true\n}'"
					},
					"response": []
				},
				{
					"name": "Partial product update by invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"PATCH /products/id/{productId} returns 404 if id is invalid\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"name\":\"New Updated Name\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{demo_url}}/products/id/{{invalid_id}}",
							"host": [
								"{{demo_url}}"
							],
							"path": [
								"products",
								"id",
								"{{invalid_id}}"
							]
						},
						"description": "Generated from cURL: curl -X 'PATCH' \\\n  'https://intern.demoshopping.ru/products/id/1' \\\n  -H 'accept: */*' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"name\": \"string\",\n  \"description\": \"string\",\n  \"price\": 0,\n  \"category\": \"string\",\n  \"manufacturer\": \"string\",\n  \"imageUrl\": \"string\",\n  \"freeShipping\": true\n}'"
					},
					"response": []
				},
				{
					"name": "Partial product update by valid id [error]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"PATCH /products/id/{productId} returns 400 if json is incorrect\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"names\":\"New Updated Name\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{demo_url}}/products/id/{{new_id}}",
							"host": [
								"{{demo_url}}"
							],
							"path": [
								"products",
								"id",
								"{{new_id}}"
							]
						},
						"description": "Generated from cURL: curl -X 'PATCH' \\\n  'https://intern.demoshopping.ru/products/id/1' \\\n  -H 'accept: */*' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"name\": \"string\",\n  \"description\": \"string\",\n  \"price\": 0,\n  \"category\": \"string\",\n  \"manufacturer\": \"string\",\n  \"imageUrl\": \"string\",\n  \"freeShipping\": true\n}'"
					},
					"response": []
				},
				{
					"name": "Delete product with valid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"DELETE /products/id/{productId} returns 200 on success\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{demo_url}}/products/id/{{new_id}}",
							"host": [
								"{{demo_url}}"
							],
							"path": [
								"products",
								"id",
								"{{new_id}}"
							]
						},
						"description": "Generated from cURL: curl -X 'DELETE' \\\n  'https://intern.demoshopping.ru/products/id/1' \\\n  -H 'accept: */*'"
					},
					"response": []
				},
				{
					"name": "Delete product with valid id [error]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"DELETE /products/id/{productId} returns 403 if product cannot be deleted\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{demo_url}}/products/id/1",
							"host": [
								"{{demo_url}}"
							],
							"path": [
								"products",
								"id",
								"1"
							]
						},
						"description": "Generated from cURL: curl -X 'DELETE' \\\n  'https://intern.demoshopping.ru/products/id/1' \\\n  -H 'accept: */*'"
					},
					"response": []
				},
				{
					"name": "Delete product with invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"DELETE /products/id/{productId} returns 404 if product id is invalid\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{demo_url}}/products/id/{{invalid_id}}",
							"host": [
								"{{demo_url}}"
							],
							"path": [
								"products",
								"id",
								"{{invalid_id}}"
							]
						},
						"description": "Generated from cURL: curl -X 'DELETE' \\\n  'https://intern.demoshopping.ru/products/id/1' \\\n  -H 'accept: */*'"
					},
					"response": []
				},
				{
					"name": "Find products by valid category",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const options = [\"Phones\", \"Watches\", \"Laptops\"];",
									"// Выбираем случайное",
									"const randomValue = options[Math.floor(Math.random() * options.length)];",
									"// Устанавливаем переменную окружения",
									"pm.collectionVariables.set(\"valid_category\", randomValue);",
									"// Для проверки — выводим в консоль",
									"console.log(\"Выбранная категория:\", randomValue);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GET /products/FindByCategory returns 200 on success\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{demo_url}}/products/FindByCategory?category={{valid_category}}",
							"host": [
								"{{demo_url}}"
							],
							"path": [
								"products",
								"FindByCategory"
							],
							"query": [
								{
									"key": "category",
									"value": "{{valid_category}}",
									"description": "Случайная категория из трёх валидных"
								}
							]
						},
						"description": "Generated from cURL: curl -X 'GET' \\\n  'https://intern.demoshopping.ru/products/FindByCategory?category=Phones' \\\n  -H 'accept: application/json'"
					},
					"response": []
				},
				{
					"name": "Find products by invalid category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GET /products/FindByCategory returns 404 on failure\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{demo_url}}/products/FindByCategory?category=Something",
							"host": [
								"{{demo_url}}"
							],
							"path": [
								"products",
								"FindByCategory"
							],
							"query": [
								{
									"key": "category",
									"value": "Something",
									"description": "Невалидная категория"
								}
							]
						},
						"description": "Generated from cURL: curl -X 'GET' \\\n  'https://intern.demoshopping.ru/products/FindByCategory?category=Phones' \\\n  -H 'accept: application/json'"
					},
					"response": []
				},
				{
					"name": "Find products by valid manufacturer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const options = [\"Apple\", \"Xiaomi\", \"Huawei\", \"Samsung\"];",
									"// Выбираем случайное",
									"const randomValue = options[Math.floor(Math.random() * options.length)];",
									"// Устанавливаем переменную окружения",
									"pm.collectionVariables.set(\"valid_manufacturer\", randomValue);",
									"// Для проверки — выводим в консоль",
									"console.log(\"Выбранный производитель:\", randomValue);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GET /products/FindByManufacturer returns 200 on success\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{demo_url}}/products/FindByManufacturer?manufacturer={{valid_manufacturer}}",
							"host": [
								"{{demo_url}}"
							],
							"path": [
								"products",
								"FindByManufacturer"
							],
							"query": [
								{
									"key": "manufacturer",
									"value": "{{valid_manufacturer}}",
									"description": "Случайный производитель их четырёх валидных"
								}
							]
						},
						"description": "Generated from cURL: curl -X 'GET' \\\n  'https://intern.demoshopping.ru/products/FindByManufacturer?manufacturer=Apple' \\\n  -H 'accept: application/json'"
					},
					"response": []
				},
				{
					"name": "Find products by invalid manufacturer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GET /products/FindByManufacturer returns 404 on failure\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{demo_url}}/products/FindByManufacturer?manufacturer=Something",
							"host": [
								"{{demo_url}}"
							],
							"path": [
								"products",
								"FindByManufacturer"
							],
							"query": [
								{
									"key": "manufacturer",
									"value": "Something"
								}
							]
						},
						"description": "Generated from cURL: curl -X 'GET' \\\n  'https://intern.demoshopping.ru/products/FindByManufacturer?manufacturer=Apple' \\\n  -H 'accept: application/json'"
					},
					"response": []
				},
				{
					"name": "Find products with free shipping",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GET /products/FindByShipping returns 200 on success\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{demo_url}}/products/FindByShipping?freeShipping=true",
							"host": [
								"{{demo_url}}"
							],
							"path": [
								"products",
								"FindByShipping"
							],
							"query": [
								{
									"key": "freeShipping",
									"value": "true"
								}
							]
						},
						"description": "Generated from cURL: curl -X 'GET' \\\n  'https://intern.demoshopping.ru/products/FindByShipping?freeShipping=true' \\\n  -H 'accept: application/json'"
					},
					"response": []
				},
				{
					"name": "Find products without free shipping",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GET /products/FindByShipping returns 200 on success\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{demo_url}}/products/FindByShipping?freeShipping=false",
							"host": [
								"{{demo_url}}"
							],
							"path": [
								"products",
								"FindByShipping"
							],
							"query": [
								{
									"key": "freeShipping",
									"value": "false"
								}
							]
						},
						"description": "Generated from cURL: curl -X 'GET' \\\n  'https://intern.demoshopping.ru/products/FindByShipping?freeShipping=true' \\\n  -H 'accept: application/json'"
					},
					"response": []
				},
				{
					"name": "Find products by shipping [error]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GET /products/FindByShipping returns 404 on failure\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{demo_url}}/products/FindByShipping?freeShipping=somevalue",
							"host": [
								"{{demo_url}}"
							],
							"path": [
								"products",
								"FindByShipping"
							],
							"query": [
								{
									"key": "freeShipping",
									"value": "somevalue"
								}
							]
						},
						"description": "Generated from cURL: curl -X 'GET' \\\n  'https://intern.demoshopping.ru/products/FindByShipping?freeShipping=true' \\\n  -H 'accept: application/json'"
					},
					"response": []
				},
				{
					"name": "Filter products with valid parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GET /products/filter returns 200 on success\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{demo_url}}/products/filter?category=Phones&manufacturer=Xiaomi&freeShipping=true&minPrice=0&maxPrice=6000",
							"host": [
								"{{demo_url}}"
							],
							"path": [
								"products",
								"filter"
							],
							"query": [
								{
									"key": "category",
									"value": "Phones"
								},
								{
									"key": "manufacturer",
									"value": "Xiaomi"
								},
								{
									"key": "freeShipping",
									"value": "true"
								},
								{
									"key": "minPrice",
									"value": "0"
								},
								{
									"key": "maxPrice",
									"value": "6000"
								}
							]
						},
						"description": "Generated from cURL: curl -X 'GET' \\\n  'https://intern.demoshopping.ru/products/filter?category=Phones&manufacturer=Xiaomi&freeShipping=true&minPrice=0&maxPrice=6000' \\\n  -H 'accept: application/json'"
					},
					"response": []
				},
				{
					"name": "Filter products with invalid parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GET /products/filter returns 400 on failure\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{demo_url}}/products/filter?category=RandomCategory&manufacturer=123&freeShipping=true&minPrice=-1&maxPrice=6000",
							"host": [
								"{{demo_url}}"
							],
							"path": [
								"products",
								"filter"
							],
							"query": [
								{
									"key": "category",
									"value": "RandomCategory"
								},
								{
									"key": "manufacturer",
									"value": "123"
								},
								{
									"key": "freeShipping",
									"value": "true"
								},
								{
									"key": "minPrice",
									"value": "-1"
								},
								{
									"key": "maxPrice",
									"value": "6000"
								}
							]
						},
						"description": "Generated from cURL: curl -X 'GET' \\\n  'https://intern.demoshopping.ru/products/filter?category=Phones&manufacturer=Xiaomi&freeShipping=true&minPrice=0&maxPrice=6000' \\\n  -H 'accept: application/json'"
					},
					"response": []
				}
			]
		},
		{
			"name": "Cart",
			"item": [
				{
					"name": "Add a valid item to cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST /cart returns 200 on success\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"productId\": 1,\n  \"quantity\": 2\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{demo_url}}/cart",
							"host": [
								"{{demo_url}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a invalid item to cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST /cart returns 400 on failure (wrong data in body)\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"productId\": {{invalid_id}},\n  \"quantity\": 2\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{demo_url}}/cart",
							"host": [
								"{{demo_url}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a invalid item to cart [error]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST /cart returns 500 on error\", function () {",
									"    pm.response.to.have.status(500);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"productId\": -1,\n  \"quantity\": -1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{demo_url}}/cart",
							"host": [
								"{{demo_url}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a valid item to cart - no auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST /cart returns 401 with no auth\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"productId\": 1,\n  \"quantity\": 2\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{demo_url}}/cart",
							"host": [
								"{{demo_url}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get items in the cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Парсим тело ответа как JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Проверяем, что это массив и в нём есть хотя бы один элемент",
									"if (Array.isArray(jsonData) && jsonData.length > 0) {",
									"    const firstItem = jsonData[0];",
									"    const cartItemId = firstItem.cart_item_id;",
									"",
									"    // Сохраняем в переменную ",
									"    pm.collectionVariables.set(\"cart_item_id\", cartItemId);",
									"",
									"    // Лог в консоль Postman",
									"    console.log(\"Сохранён cart_item_id:\", cartItemId);",
									"} else {",
									"    console.error(\"Ответ не является массивом или он пуст\");",
									"}",
									"",
									"// Тесты",
									"",
									"pm.test(\"GET /getCart returns 200 on success\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{demo_url}}/getCart",
							"host": [
								"{{demo_url}}"
							],
							"path": [
								"getCart"
							]
						},
						"description": "Generated from cURL: curl -X 'GET' \\\n  'https://intern.demoshopping.ru/getCart' \\\n  -H 'accept: */*'"
					},
					"response": []
				},
				{
					"name": "Get items in the cart - no auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GET /getCart returns 401 with no auth\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{demo_url}}/getCart",
							"host": [
								"{{demo_url}}"
							],
							"path": [
								"getCart"
							]
						},
						"description": "Generated from cURL: curl -X 'GET' \\\n  'https://intern.demoshopping.ru/getCart' \\\n  -H 'accept: */*'"
					},
					"response": []
				},
				{
					"name": "Update quantity of first item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GET /cart/{cartItemId} returns 200 on success\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quantity\": 5\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{demo_url}}/cart/{{cart_item_id}}",
							"host": [
								"{{demo_url}}"
							],
							"path": [
								"cart",
								"{{cart_item_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update quantity of invalid item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GET /cart/{cartItemId} returns 404 if invalid item id\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quantity\": 5\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{demo_url}}/cart/-1",
							"host": [
								"{{demo_url}}"
							],
							"path": [
								"cart",
								"-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update quantity of first item [error]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GET /cart/{cartItemId} returns 500 if incorrect data is passed\", function () {",
									"    pm.response.to.have.status(500);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quantity\": \"ssdsfsdfsf\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{demo_url}}/cart/{{cart_item_id}}",
							"host": [
								"{{demo_url}}"
							],
							"path": [
								"cart",
								"{{cart_item_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update quantity of first item - no auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GET /cart/{cartItemId} returns 401 with no auth\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quantity\": 5\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{demo_url}}/cart/{{cart_item_id}}",
							"host": [
								"{{demo_url}}"
							],
							"path": [
								"cart",
								"{{cart_item_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete item from cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"DELETE /cart/{cartItemId} returns 200 on success\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{demo_url}}/cart/{{cart_item_id}}",
							"host": [
								"{{demo_url}}"
							],
							"path": [
								"cart",
								"{{cart_item_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete invalid item from cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"DELETE /cart/{cartItemId} returns 404 if invalid item id\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{demo_url}}/cart/-1",
							"host": [
								"{{demo_url}}"
							],
							"path": [
								"cart",
								"-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete item from cart - no auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"DELETE /cart/{cartItemId} returns 401 with no auth\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{demo_url}}/cart/{{cart_item_id}}",
							"host": [
								"{{demo_url}}"
							],
							"path": [
								"cart",
								"{{cart_item_id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{key}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "demo_url",
			"value": "https://intern.demoshopping.ru",
			"type": "string"
		},
		{
			"key": "new_id",
			"value": ""
		},
		{
			"key": "invalid_id",
			"value": "100sdfsfsf341",
			"type": "string"
		},
		{
			"key": "key",
			"value": "{{vault:json-web-token}}",
			"type": "string"
		},
		{
			"key": "cart_item_id",
			"value": ""
		},
		{
			"key": "valid_category",
			"value": ""
		},
		{
			"key": "valid_manufacturer",
			"value": ""
		}
	]
}